name: Test Coverage

on:
  pull_request:
    branches: [ main, master, develop ]

jobs:
  coverage:
    name: Generate and Report Coverage
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Run tests with coverage
      run: flutter test --coverage

    - name: Install lcov
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y lcov

    - name: Normalize coverage file paths
      run: |
        # Convert Windows-style backslashes to Unix-style forward slashes
        sed -i 's/\\/\//g' coverage/lcov.info
        echo "Coverage file paths normalized"

    - name: Verify coverage file exists
      run: |
        if [ ! -f coverage/lcov.info ]; then
          echo "Error: coverage/lcov.info not found!"
          exit 1
        fi
        echo "Coverage file size: $(wc -c < coverage/lcov.info) bytes"
        echo "Coverage file lines: $(wc -l < coverage/lcov.info) lines"

    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep "lines" | awk '{print $2}')
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE"
        
    - name: Generate detailed coverage list
      id: detailed
      run: |
        lcov --list coverage/lcov.info > coverage-list.txt 2>&1
        echo "Detailed coverage report generated"
        head -30 coverage-list.txt

    - name: Generate HTML coverage report
      run: |
        genhtml coverage/lcov.info -o coverage/html
        echo "HTML coverage report generated at coverage/html/index.html"

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage/lcov.info
          coverage-list.txt
          coverage/html/
        retention-days: 30

    - name: Comment PR with coverage
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const coverage = '${{ steps.coverage.outputs.percentage }}';
          
          // Read the coverage list file that was generated in the previous step
          const lcovOutput = fs.readFileSync('coverage-list.txt', 'utf-8');
          
          // Parse coverage percentage
          const coverageNum = parseFloat(coverage);
          const emoji = coverageNum >= 80 ? '‚úÖ' : coverageNum >= 60 ? '‚ö†Ô∏è' : '‚ùå';
          
          const comment = `## ${emoji} Test Coverage Report
          
          **Overall Coverage: ${coverage}**
          
          <details>
          <summary>üìä Detailed Coverage</summary>
          
          \`\`\`
          ${lcovOutput}
          \`\`\`
          
          </details>
          
          ---
          
          üì¶ **Coverage artifacts available**: Download the full coverage report (including HTML) from the [Actions artifacts](https://github.com/${ context.repo.owner }/${ context.repo.repo }/actions/runs/${ context.runId }).
          
          *Coverage threshold: ‚úÖ ‚â•80% | ‚ö†Ô∏è ‚â•60% | ‚ùå <60%*
          `;
          
          // Find existing coverage comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Test Coverage Report')
          );
          
          // Update or create comment
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }
